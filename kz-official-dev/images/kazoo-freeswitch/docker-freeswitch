#!/bin/bash

FS_CFG_DIR=${FS_CFG_DIR:-/etc/kazoo/freeswitch}

FREESWITCH_ARGS="$FS_ARGS"
FREESWITCH_PARAMS="$FS_PARAMS"

## IP and Ports
FS_DOCKER_START="$S_DOCKER_START"
FS_DOCKER_END="$FS_DOCKER_END"

FIND_SIP_IP="$FIND_SIP_IP"
FS_SIP_IP="$FS_SIP_IP"
FS_EXT_SIP_IP="$FS_EXT_SIP_IP"
FS_SIP_PORT="$FS_SIP_PORT"

FIND_RTP_IP="$FIND_RTP_IP"
FS_RTP_IP="$FS_RTP_IP"
FS_EXT_RTP_IP="$FS_EXT_RTP_IP"

## MOD_KAZOO
FS_MOD_KZ_LISTEN_IP="$FS_MOD_KZ_LISTEN_IP"
FS_MOD_KZ_LISTEN_PORT="$FS_MOD_KZ_LISTEN_PORT"
FS_MOD_KZ_COOKIE="$KAZOO_COOKIE"
FS_MOD_KZ_SHORT_NAME="$FS_MOD_KZ_SHORT_NAME"
FS_MOD_KZ_NODE_NAME="$FS_MOD_KZ_NODE_NAME"

## Trace
FS_TRACE="${FS_TRACE}"
FS_TRACE_URI="${FS_SIP_TRACE_URI:-127.0.0.1}"
FS_TRACE_PORT="${FS_SIP_TRACE_PORT:-9060}"
FS_HEP_CAPTURE_ID=${FS_HEP_CAPTURE_ID:-100}

FS_BIN_FILE="${FS_BIN:-/usr/bin/freeswitch}"
PID_FILE="${FS_PID:-/var/run/freeswitch/freeswitch.pid}"
FS_HOME="${FS_HOME:-/var/lib/kazoo-freeswitch}"

# check if the local user (devuser) is exists
USER="${LOCAL_USERNAME}"
if [ -z "$USER" ]; then
    USER="freeswitch"
else
    (id -u "$USER" >/dev/null 2>&1) || USER="freeswitch"
fi

# we don't want to run freeswitch as root (also helps process reaping)
if [ "$(whoami)" == "root" ]; then
    FS_BIN_FILE="su-exec $USER $FS_BIN_FILE"
fi

if [ -z "$FREESWITCH_ARGS" ]; then
    FREESWITCH_ARGS="-nonat -conf $FS_CFG_DIR -run /var/run/freeswitch -db /var/lib/kazoo-freeswitch/db -log /var/log/freeswitch -cache /var/lib/kazoo-freeswitch/cache -sounds /usr/share/kazoo-freeswitch/sounds -storage /var/lib/kazoo-freeswitch/storage"
fi

sed_fs_file() {
    local regex="$1"
    local file="$2"
    local variable="$3"
    if [ -n "$variable" ]; then
        sed -r -i "$regex" "$2"
    fi
}

maybe_fs_set_rtp_port_range() {
    local port_start_regex="s/(rtp-start-port.*value=\")[0-9]+/\1$FS_DOCKER_START/g"
    local port_end_regex="s/(rtp-end-port.*value=\")[0-9]+/\1$FS_DOCKER_END/g"
    local switch_file="$FS_CFG_DIR/autoload_configs/switch.conf.xml"

    sed_fs_file "$port_start_regex" "$switch_file" "$FS_DOCKER_START"
    sed_fs_file "$port_end_regex" "$switch_file" "$FS_DOCKER_START"
}

maybe_fs_set_ip() {
    local sipinterface_file="$FS_CFG_DIR/sip_profiles/sipinterface_1.xml"

    if [ -n "$FIND_SIP_IP" ]; then
        FS_SIP_IP="`(ip route 2>/dev/null) | grep default | sed -r 's/.*src ([0-9.]+).*/\1/g'`"
        if [ -z "$FS_SIP_IP" ]; then
            echo "can not find local sip ip address"
            exit 1
        fi
    fi
    local sip_ip_regex="s/(sip-ip.*value=\")[^\"]+/\1$FS_SIP_IP/g"
    local ext_sip_ip_regex="s/(ext-sip-ip.*value=\")[^\"]+/\1$FS_EXT_SIP_IP/g"
    local sip_port_regex="s/(sip-port.*value=\")[^\"]+/\1$FS_SIP_PORT/g"

    sed_fs_file "$sip_ip_regex" "$sipinterface_file" "$FS_SIP_IP"
    sed_fs_file "$ext_sip_ip_regex" "$sipinterface_file" "$FS_EXT_SIP_IP"
    sed_fs_file "$sip_port_regex" "$sipinterface_file" "$FS_SIP_PORT"

    if [ -n "$FIND_RTP_IP" ]; then
        FS_RTP_IP="`(ip route 2>/dev/null) | grep default | sed -r 's/.*src ([0-9.]+).*/\1/g'`"
        if [ -z "$FS_RTP_IP" ]; then
            echo "can not find local rtp ip address"
            exit 1
        fi
    fi
    local rtp_ip_regex="s/(rtp-ip.*value=\")[^\"]+/\1$FS_RTP_IP/g"
    local ext_rtp_ip_regex="s/(ext-rtp-ip.*value=\")[^\"]+/\1$FS_EXT_RTP_IP/g"

    sed_fs_file "$rtp_ip_regex" "$sipinterface_file" "$FS_RTP_IP"
    sed_fs_file "$ext_rtp_ip_regex" "$sipinterface_file" "$FS_EXT_RTP_IP"
}

maybe_fs_configure_mod_kazoo() {
    local kazoo_file="$FS_CFG_DIR/autoload_configs/kazoo.conf.xml"

    local ip_regex="s/(listen-ip.*value=\")[0-9]+/\1$FS_MOD_KZ_LISTEN_IP/g"
    local port_regex="s/(listen-port.*value=\")[0-9]+/\1$FS_MOD_KZ_LISTEN_PORT/g"

    local cookie_regex="s/(cookie.*value=\")[0-9]+/\1$FS_MOD_KZ_COOKIE/g"
    local shortname_regex="s/(shortname.*value=\")[0-9]+/\1$FS_MOD_KZ_SHORT_NAME/g"
    local nodename_regex="s/(nodename.*value=\")[0-9]+/\1$FS_MOD_KZ_NODE_NAME/g"

    sed_fs_file "$ip_regex" "$kazoo_file" "$FS_MOD_KZ_LISTEN_IP"
    sed_fs_file "$port_regex" "$kazoo_file" "$FS_MOD_KZ_LISTEN_PORT"
    sed_fs_file "$cookie_regex" "$kazoo_file" "$FS_MOD_KZ_COOKIE"
    sed_fs_file "$nodename_regex" "$kazoo_file" "$FS_MOD_KZ_NODE_NAME"
    sed_fs_file "$shortname_regex" "$kazoo_file" "$FS_MOD_KZ_SHORT_NAME"
}

maybe_fs_enable_trace() {
    if [ -z "$FS_TRACE" ]; then
        return
    fi

    local sofia_file=$FS_ROOT_PATH/autoload_configs/sofia.conf.xml

    local server_regex="/auto-restart/a <param name=\"capture-server\" value=\"udp:$FS_TRACE_URI:$FS_TRACE_PORT;hep=3;capture_id=$FS_HEP_CAPTURE_ID\"/>"

    if [ "$(grep -co 'capture-server' $sofia_file)" -eq 0 ]; then
        sed_fs_file "$server_regex" "$sofia_file"
    fi
}

fs_prepare_configs() {
    maybe_fs_set_rtp_port_range
    maybe_fs_set_ip
    maybe_fs_configure_mod_kazoo
    maybe_fs_enable_trace
}

prepare() {
    # be nice and change ownership of actual freeswitch config dir
    chown -R ${USER} /etc/freeswitch
    mkdir -p /var/log/freeswitch
    chown -R ${USER} /var/log/freeswitch
    mkdir -p /var/lib/kazoo-freeswitch/{db,cache,storage}
    chown -R ${USER} /var/lib/kazoo-freeswitch
    mkdir -p /usr/share/kazoo-freeswitch/sounds
    chown -R ${USER} /usr/share/kazoo-freeswitch/sounds
    mkdir -p /var/run/freeswitch
    chown -R ${USER} /var/run/freeswitch
    if [ -e ${PID_FILE} ]; then
        rm -rf ${PID_FILE}
    fi

    fs_prepare_configs
}


start() {
    cd ${FS_HOME}

    /usr/bin/epmd -daemon
    ${FS_BIN_FILE} ${FREESWITCH_ARGS} ${FREESWITCH_PARAMS} "$@"
}

status() {
    fs_cli -x 'status' && fs_cli -x 'erlang status'
}

pause() {
    fs_cli -x 'fsctl pause'
}

resume() {
    fs_cli -x 'fsctl resume'
}

case "$1" in
    prepare)
        prepare
        ;;
    start)
        start
        ;;
    status)
        status
        ;;
    pause)
        pause
        ;;
    resume)
        resume
        ;;
    *)
        echo "Usage: freeswitch {prepare|start|status|pause|resume}"
        ;;
esac
